#физическая строка
num = 8

#логическая строка в С/C++ стиле
long_text  = "Something very-very"\
            "long"

#логическая строка в стиле Python
very_long_text = ("First part\n"
                  "second part") 
print(very_long_text) 


#Утверждения бывают:
#Простыми(теми, которые не содержат в себе другие утверждения)
#Составными(состоят из положений)(Например услорвные операторы, циклы, объявления функций)
#Структура положений:
#1. Header (например if expression)
#2. Тело(все, что следует зв header'ом)


# Поговорим об отступах
# В Питоне отступы являются единственным средством для определения того, что относится к телу положения
# (В отличии от C/C++/Другий С-подобных языков)


# Язык состоит из некоторых атомарных частей, которые интепретатор может преобразовать в полезный код
# Такие атомарные единицы называются токенами
# Токенами в Питоне являются:
# 1. Идентификаторы - любые ссылки на значения(на объекты, функции, классы)
# 2. Литералы - неименованные значения в языке
# 3. Операторы(+, -, *, **, /, //, %, >, <, >=, <=, !=, ==, &, |, ^, ~, <<, >>, =, ..)
# 4. Разделители - нечто, требующееся для разделения сущностей интепретатором(',' , '.' , ';' , '()', '[]', '{}' )
# 5. Ключевые слова (if, else, elif, for, in, while)


# ОПЕРАТОРЫ ПРИВЯЗКИ

# Сначала обсудим переменные и ссылки
# По сути все в питоне является ссылками, указывающими на существующие объекты
# Ссылки не имеют никакого фиксированного типа данных
# Рассмотрим примеры
# num1 = 5 - В этот момент в памяти создается ячейка, в котором есть новый объект 5 и ссылка на него
# num2 = num1 - В этот момент в памяти создается лишь новая ссылка, но она указывает на уже существующий объект 5
# num1 = 6 - В этот момент объект 5 никак не меняется, но создается новый объект 6, на который и будет указывать ссылка num1
# Чтобы после перепривязки ссылки объекты не оставались в памяти в Питоне существует механихм сборки мусора
# Для того, чтобы узнать, на какой объект ссылается ссылка существует функция id()

# num1 = 5
# num2 = num1
#print(id(num1) == id(num2)) - Выведет True
# num2 = 6
#print(id(num1) == id(num2)) - Выведет False
# В питоне уже размещены в памяти все числа от 0 до 255, поэтому если две ссылки ссылаются на значения из этого,
# то они не будут пересоздаваться

# Вернемся к операторам привязки
# Операторы привязки бывают простые и составные
# Простые: 
# 1. Примеры из блока про ссылки
# 2. a = b = c = 0
# 3. a, b = b, a
# Есть еще варианты, но их мы разберем позднее
# Составные(могут применяться только к уже существующим объектам):
# 1. a+=1 


# КОНСТРУКЦИИ ПОТОКА ВЫПОЛНЕНИЯ ПРОГРАММЫ
# 1. If-statement
# 2. Циклы while
# 3. Цикл for
# 4. Break
# 5. Continue
# 6. else в контексте цикла
